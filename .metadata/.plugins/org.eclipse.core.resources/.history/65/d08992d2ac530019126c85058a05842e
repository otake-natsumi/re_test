package com.corvadev.illustsite.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.corvadev.illustsite.dto.IllustInfoDTO;
import com.corvadev.illustsite.util.DBConnector;


public class IllustInfoDAO {

	public List<IllustInfoDAO> getIllustInfoList() {
		DBConnector dbConnector = new DBConnector();
		Connection connection = dbConnector.getConnection();
		List<IllustInfoDAO> illustInfoDAOList = new ArrayList<IllustInfoDAO>();
		String sql = "select * from product_info";

		try {
			PreparedStatement preparedStatement = connection.prepareStatement(sql);
			ResultSet resultSet = preparedStatement.executeQuery();
			while (resultSet.next()) {
				illustInfoDAO.setId(resultSet.getInt("id"));
				illustInfoDAO.setIllustId(resultSet.getInt("illust_id"));
				illustInfoDAO.setIllustName(resultSet.getString("illust_name"));
				illustInfoDAO.setIllustDescribe(resultSet.getString("product_describe"));W
				illustInfoDAO.setImageFilePath(resultSet.getString("image_file_path"));
				illustInfoDAO.setImageFileName(resultSet.getString("image_file_name"));
				illustInfoDAO.setReleaseDate(resultSet.getDate("release_date"));
				illustInfoDAO.setReleaseCompany(resultSet.getString("release_company"));
				illustInfoDAOList.add(illustInfoDAO);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}finally {
			try {
				connection.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return illustInfoDAOList;
	}

	public IllustInfoDAO getProductInfo(int productId) {
		DBConnector dbConnector = new DBConnector();
		Connection connection = dbConnector.getConnection();
		IllustInfoDAO illustInfoDAO = new IllustInfoDAO();
		String sql = "select * from product_info where product_id=?";
		try {
			PreparedStatement preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, productId);
			ResultSet resultSet = preparedStatement.executeQuery();
			while (resultSet.next()) {
				illustInfoDAO.setId(resultSet.getInt("id"));
				illustInfoDAO.setIllustId(resultSet.getInt("illust_id"));
				illustInfoDAO.setIllustName(resultSet.getString("illust_name"));
				illustInfoDAO.setIllustDescribe(resultSet.getString("product_describe"));W
				illustInfoDAO.setImageFilePath(resultSet.getString("image_file_path"));
				illustInfoDAO.setImageFileName(resultSet.getString("image_file_name"));
				illustInfoDAO.setReleaseDate(resultSet.getDate("release_date"));
				illustInfoDAO.setReleaseCompany(resultSet.getString("release_company"));
				illustInfoDAOList.add(illustInfoDAO);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}finally {
			try {
				connection.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return illustInfoDAO;
	}

	public List<IllustInfoDAO> getProductInfoListByCategoryId(int categoryId, int illustId, int limitOffset,
			int limitRowCount) {
		DBConnector dbConnector = new DBConnector();
		Connection connection = dbConnector.getConnection();
		List<IllustInfoDAO> illustInfoDAOList = new ArrayList<IllustInfoDAO>();
		String sql = "select * from product_info where category_id=? and product_id not in(?) order by rand() limit ?,?";
		try {
			PreparedStatement preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, categoryId);
			preparedStatement.setInt(2, illustId);
			preparedStatement.setInt(3, limitOffset);
			preparedStatement.setInt(4, limitRowCount);
			ResultSet resultSet = preparedStatement.executeQuery();
			while (resultSet.next()) {
				illustInfoDAO.setId(resultSet.getInt("id"));
				illustInfoDAO.setIllustId(resultSet.getInt("illust_id"));
				illustInfoDAO.setIllustName(resultSet.getString("illust_name"));
				illustInfoDAO.setIllustDescribe(resultSet.getString("product_describe"));W
				illustInfoDAO.setImageFilePath(resultSet.getString("image_file_path"));
				illustInfoDAO.setImageFileName(resultSet.getString("image_file_name"));
				illustInfoDAO.setReleaseDate(resultSet.getDate("release_date"));
				illustInfoDAO.setReleaseCompany(resultSet.getString("release_company"));
				illustInfoDAOList.add(illustInfoDAO);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}finally {
			try {
				connection.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return illustInfoDAOList;
	}

	public List<IllustInfoDAO> getProductInfoListAll(String[] keywordsList) {
		DBConnector dbConnector = new DBConnector();
		Connection connection = dbConnector.getConnection();
		List<IllustInfoDAO> illustInfoDAOList = new ArrayList<IllustInfoDAO>();
		String sql = "select * from product_info where";
		boolean initializeFlag = true;
		for (String keyword : keywordsList) {
			if (initializeFlag) {
				sql += " (product_name like '%" + keyword + "%' or product_name_kana like '%" + keyword + "%')";
				initializeFlag = false;
			} else {
				sql += " or (product_name like '%" + keyword + "%' or product_name_kana like '%" + keyword + "%')";
			}
		}

		try {
			PreparedStatement preparedStatement = connection.prepareStatement(sql);
			ResultSet resultSet = preparedStatement.executeQuery();
			while (resultSet.next()) {
				IllustInfoDAO illustInfoDAO = new IllustInfoDAO();
				illustInfoDAO.setId(resultSet.getInt("id"));
				illustInfoDAO.setIllustId(resultSet.getInt("illust_id"));
				illustInfoDAO.setIllustName(resultSet.getString("illust_name"));
				illustInfoDAO.setIllustDescribe(resultSet.getString("product_describe"));W
				illustInfoDAO.setImageFilePath(resultSet.getString("image_file_path"));
				illustInfoDAO.setImageFileName(resultSet.getString("image_file_name"));
				illustInfoDAO.setReleaseDate(resultSet.getDate("release_date"));
				illustInfoDAO.setReleaseCompany(resultSet.getString("release_company"));
				illustInfoDAOList.add(illustInfoDAO);

			}
		} catch (SQLException e) {
			e.printStackTrace();
		}finally {
			try {
				connection.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return illustInfoDAOList;
	}

	public List<IllustInfoDAO> getProductInfoListByKeywords(String[] keywordsList, String categoryId) {
		DBConnector dbConnector = new DBConnector();
		Connection connection = dbConnector.getConnection();
		List<IllustInfoDAO> illustInfoDAOList = new ArrayList<IllustInfoDAO>();
		String sql = "select * from product_info where";
		boolean initializeFlag = true;
		for (String keyword : keywordsList) {
			if (initializeFlag) {
				sql += " category_id=" + categoryId + " and ((product_name like '%" + keyword + "%' or product_name_kana like '%" + keyword + "%')";
				initializeFlag = false;
			} else {
				sql += " or (product_name like '%" + keyword + "%' or product_name_kana like '%" + keyword + "%')";
			}
		}
		sql += ")";

		try {
			PreparedStatement preparedStatement = connection.prepareStatement(sql);
			ResultSet resultSet = preparedStatement.executeQuery();
			while (resultSet.next()) {
				IllustInfoDAO illustInfoDAO = new IllustInfoDAO();
				illustInfoDAO.setId(resultSet.getInt("id"));
				illustInfoDAO.setIllustId(resultSet.getInt("illust_id"));
				illustInfoDAO.setIllustName(resultSet.getString("illust_name"));
				illustInfoDAO.setIllustDescribe(resultSet.getString("product_describe"));W
				illustInfoDAO.setImageFilePath(resultSet.getString("image_file_path"));
				illustInfoDAO.setImageFileName(resultSet.getString("image_file_name"));
				illustInfoDAO.setReleaseDate(resultSet.getDate("release_date"));
				illustInfoDAO.setReleaseCompany(resultSet.getString("release_company"));
				illustInfoDAOList.add(illustInfoDAO);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}finally {
			try {
				connection.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return illustInfoDAOList;
	}
}